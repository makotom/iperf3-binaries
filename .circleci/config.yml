version: 2.1

setup: << pipeline.parameters.is-setup >>

parameters:
  force-build:
    type: string
    default: ""

  # Parameters below are intended for internal use only
  is-setup:
    type: boolean
    default: true
  src-repo:
    type: string
    default: https://github.com/esnet/iperf.git
  src-releases-list-url:
    type: string
    default: https://github.com/esnet/iperf/tags
  target-rev:
    type: string
    default: ""
  target-commit-hash:
    type: string
    default: ""
  release-on:
    type: string
    default: main

  common-build-params:
    type: string
    default: "--disable-shared --disable-static"
  label-linux:
    type: string
    default: iperf3-linux
  label-windows:
    type: string
    default: iperf3-windows
  label-macos:
    type: string
    default: iperf3-macos

executors:
  ubuntu:
    docker:
      - image: ubuntu:rolling
  archlinux:
    docker:
      - image: archlinux
  windows:
    machine:
      image: windows-server-2019-vs2019:stable
    shell: powershell.exe
    resource_class: windows.medium
  macos:
    macos:
      xcode: 13.0.0

jobs:
  setup:
    executor: ubuntu
    parameters:
      continue-config:
        type: string
        default: .circleci/config.yml
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt -y install git jq curl
      - run:
          name: Determine whether we should build the source
          command: |
            if [ "<< pipeline.parameters.force-build >>" != "" ]
            then
              TARGET_REV="<< pipeline.parameters.force-build >>"
              echo Forcibly building revision ${TARGET_REV}!
            else
              TARGET_REV=$(curl -sSJL << pipeline.parameters.src-releases-list-url >> | grep -o 'releases/tag/[^"]\{1,\}' | head -n 1 | awk -F/ '{ print $NF }')
              echo Detected the latest release from the origin with revision ${TARGET_REV}.
            fi

            git clone << pipeline.parameters.src-repo >>
            pushd iperf
            git checkout ${TARGET_REV}
            TARGET_COMMIT_HASH=$(git rev-parse HEAD)
            popd
            echo Corresponding commit hash is ${TARGET_COMMIT_HASH}.
            echo

            if [ "<< pipeline.parameters.force-build >>" != "" ] || ! (git tag | grep -P "^${TARGET_REV}-${TARGET_COMMIT_HASH:0:7}-\d+-${CIRCLE_SHA1:0:7}")
            then
              echo Calling CircleCI API to build revision ${TARGET_REV} at ${TARGET_COMMIT_HASH}...

              curl \
                --fail \
                -X POST \
                -H "Content-Type: application/json" \
                --data-binary "$(
                  jq -n \
                    --arg continuation "$CIRCLE_CONTINUATION_KEY" \
                    --arg config "$(cat << parameters.continue-config >>)" \
                    --arg target_rev "${TARGET_REV}" \
                    --arg target_commit_hash "${TARGET_COMMIT_HASH}" \
                    '{
                      "continuation-key": $continuation,
                      "configuration": $config,
                      "parameters": {
                        "is-setup": false,
                        "target-rev": $target_rev,
                        "target-commit-hash": $target_commit_hash
                      }
                    }'
                  )" \
                  https://circleci.com/api/v2/pipeline/continue
            else
              echo 'We have already built this target with the tag(s) above. Halting the pipeline.'
              circleci-agent step halt
            fi

  build-linux:
    executor: archlinux
    steps:
      - run:
          name: Install dependencies
          command: pacman -Syu --noconfirm git gcc make
      - run:
          name: Clone iperf3
          command: |
            mkdir -p iperf
            cd iperf

            git init
            git remote add origin << pipeline.parameters.src-repo >>
            git fetch --depth 1 origin << pipeline.parameters.target-commit-hash >>
            git checkout << pipeline.parameters.target-commit-hash >>
      - run:
          name: Build iperf3
          working_directory: iperf
          command: |
            IPERF3_MAKE_PREFIX=$(eval echo $CIRCLE_WORKING_DIRECTORY)/<< pipeline.parameters.label-linux >>
            mkdir -p $IPERF3_MAKE_PREFIX

            ./configure --prefix=$IPERF3_MAKE_PREFIX << pipeline.parameters.common-build-params >>
            make
            make install

            mkdir -p $IPERF3_MAKE_PREFIX/share/doc/iperf3
            cp LICENSE $IPERF3_MAKE_PREFIX/share/doc/iperf3
      - run:
          name: Create a tarball
          command: tar -czf << pipeline.parameters.label-linux >>.tar.gz << pipeline.parameters.label-linux >>
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.label-linux >>.tar.gz
      - store_artifacts:
          path: << pipeline.parameters.label-linux >>.tar.gz

  build-windows:
    executor: windows
    steps:
      - run:
          name: Download Cygwin installer
          shell: bash.exe -eo pipefail
          command: curl -JOL https://cygwin.com/setup-x86_64.exe
      - run:
          name: Install Cygwin and required packages
          command: .\setup-x86_64.exe -q -s https://mirrors.kernel.org/sourceware/cygwin/ -P libssl-devel,zlib,git,gcc-core,make
      - run:
          name: Clone iperf3 with Cygwin
          shell: C:\\cygwin64\\bin\\bash.exe --login -eo pipefail
          command: |
            eval mkdir -p $CIRCLE_WORKING_DIRECTORY
            eval cd $CIRCLE_WORKING_DIRECTORY

            mkdir -p iperf
            cd iperf

            git init
            git remote add origin << pipeline.parameters.src-repo >>
            git fetch --depth 1 origin << pipeline.parameters.target-commit-hash >>
            git checkout << pipeline.parameters.target-commit-hash >>
      - run:
          name: Build iperf3 with Cygwin
          shell: C:\\cygwin64\\bin\\bash.exe --login -eo pipefail
          command: |
            NATIVE_WORK_DIR=$OLDPWD

            IPERF3_MAKE_PREFIX=$(eval echo $CIRCLE_WORKING_DIRECTORY)/<< pipeline.parameters.label-windows >>
            mkdir -p $IPERF3_MAKE_PREFIX

            eval cd $CIRCLE_WORKING_DIRECTORY/iperf
            ./configure --prefix=$IPERF3_MAKE_PREFIX << pipeline.parameters.common-build-params >>
            make
            make install

            # Bundle dependencies
            cp /usr/bin/cygwin1.dll /usr/bin/cygcrypto-1.1.dll /usr/bin/cygz.dll -t $IPERF3_MAKE_PREFIX/bin

            # Copy licence terms
            mkdir -p $IPERF3_MAKE_PREFIX/share/doc/iperf3 $IPERF3_MAKE_PREFIX/share/doc/Cygwin
            cp LICENSE -t $IPERF3_MAKE_PREFIX/share/doc/iperf3
            cp /usr/share/doc/Cygwin/CYGWIN_LICENSE /usr/share/doc/Cygwin/COPYING -t $IPERF3_MAKE_PREFIX/share/doc/Cygwin
            cp -r /usr/share/doc/openssl /usr/share/doc/zlib/ -t $IPERF3_MAKE_PREFIX/share/doc

            # Copy the deliverables to the working directory for non-Cygwin environment
            cp -r $(eval echo $CIRCLE_WORKING_DIRECTORY)/. $NATIVE_WORK_DIR
      - run:
          name: Create a Zip file
          command: |
            $ProgressPreference = "SilentlyContinue"
            Compress-Archive .\\<< pipeline.parameters.label-windows >> .\\<< pipeline.parameters.label-windows >>.zip
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.label-windows >>.zip
      - store_artifacts:
          path: << pipeline.parameters.label-windows >>.zip

  build-macos:
    executor: macos
    steps:
      - run:
          name: Clone iperf3
          command: |
            mkdir -p iperf
            cd iperf

            git init
            git remote add origin << pipeline.parameters.src-repo >>
            git fetch --depth 1 origin << pipeline.parameters.target-commit-hash >>
            git checkout << pipeline.parameters.target-commit-hash >>
      - run:
          name: Build iperf3
          working_directory: iperf
          command: |
            IPERF3_MAKE_PREFIX=$(eval echo $CIRCLE_WORKING_DIRECTORY)/<< pipeline.parameters.label-macos >>
            mkdir -p $IPERF3_MAKE_PREFIX

            ./configure --prefix=$IPERF3_MAKE_PREFIX --with-openssl=$(brew --prefix openssl) << pipeline.parameters.common-build-params >>
            make
            make install

            # Copy licence terms for iperf
            mkdir -p $IPERF3_MAKE_PREFIX/share/doc/iperf3
            cp LICENSE $IPERF3_MAKE_PREFIX/share/doc/iperf3

            # Postruns
            cd $IPERF3_MAKE_PREFIX/bin
            # Copy linked OpenSSL libraris to the current directory
            # and tell the linker to refer to them
            otool -L iperf3 | grep openssl | awk '{ print $1 }' | while read dylib
            do
              name=$(basename $dylib)
              cp $dylib ./
              chmod u+w $name
              install_name_tool -change $dylib @executable_path/$name iperf3
            done
            # Modify libssl as well
            otool -L libssl.1.1.dylib | grep openssl | awk '{ print $1 }' | while read dylib
            do
              install_name_tool -change $dylib @executable_path/$(basename $dylib) libssl.1.1.dylib
            done
            # Copy licence terms for OpenSSL
            mkdir -p $IPERF3_MAKE_PREFIX/share/doc/openssl
            cp $(brew --prefix openssl)/LICENSE $IPERF3_MAKE_PREFIX/share/doc/openssl
      - run:
          name: Create a Zip file
          command: zip -r << pipeline.parameters.label-macos >>.zip << pipeline.parameters.label-macos >>
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.label-macos >>.zip
      - store_artifacts:
          path: << pipeline.parameters.label-macos >>.zip

  test-unified:
    parameters:
      executor:
        type: string
      dir:
        type: string
    executor: << parameters.executor >>
    steps:
      - run:
          name: Test executable
          command: << parameters.dir >>/bin/iperf3 -v
      - run:
          name: Run as a server
          command: << parameters.dir >>/bin/iperf3 -s
          background: true
      - run:
          name: Run as a client
          command: << parameters.dir >>/bin/iperf3 -c localhost -R

  release:
    executor: ubuntu
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt update
            apt -y install curl git

            tmpPath=$(mktemp)
            curl -sSJL https://api.github.com/repos/cli/cli/releases/latest | grep -o 'https://github.com/cli/cli/releases/download/[^/]\{1,\}/gh_[^/]\{1,\}_linux_amd64.deb' | xargs curl -o $tmpPath -JL
            dpkg -i $tmpPath
      - run:
          name: Create a release
          command: |
            TARGET_COMMIT_HASH="<< pipeline.parameters.target-commit-hash >>"
            IPERF3_BUILD_VERSION="<< pipeline.parameters.target-rev >>-${TARGET_COMMIT_HASH:0:7}-${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}"
            gh release create -R ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} -t "${IPERF3_BUILD_VERSION}" -n "Source: https://github.com/esnet/iperf/tree/<< pipeline.parameters.target-commit-hash >>" "${IPERF3_BUILD_VERSION}" *

workflows:
  setup:
    when: << pipeline.parameters.is-setup >>
    jobs:
      - setup

  build-test-release:
    when:
      not: << pipeline.parameters.is-setup >>
    jobs:
      - build-linux
      - build-windows
      - build-macos

      - test-unified:
          name: test-linux
          requires:
            - build-linux
          executor: ubuntu
          dir: << pipeline.parameters.label-linux >>
          pre-steps:
            - attach_workspace:
                at: .
            - run:
                name: Extract << pipeline.parameters.label-linux >>.tar.gz
                command: tar -xf << pipeline.parameters.label-linux >>.tar.gz
      - test-unified:
          name: test-windows
          requires:
            - build-windows
          executor: windows
          dir: << pipeline.parameters.label-windows >>
          pre-steps:
            - attach_workspace:
                at: .
            - run:
                name: Extract << pipeline.parameters.label-windows >>.zip
                command: |
                  $ProgressPreference = "SilentlyContinue"
                  Expand-Archive .\\<< pipeline.parameters.label-windows >>.zip .
      - test-unified:
          name: test-macos
          requires:
            - build-macos
          executor: macos
          dir: << pipeline.parameters.label-macos >>
          pre-steps:
            - attach_workspace:
                at: .
            - run:
                name: Uninstall pre-installed OpenSSL
                command: brew uninstall --ignore-dependencies openssl
            - run:
                name: Extract << pipeline.parameters.label-macos >>.zip
                command: unzip << pipeline.parameters.label-macos >>.zip

      - release:
          requires:
            - test-linux
            - test-windows
            - test-macos
          context: github
          filters:
            branches:
              only: << pipeline.parameters.release-on >>
