version: 2.1

setup: << pipeline.parameters.is-setup >>

parameters:
  force-build:
    type: string
    default: ""

  # Parameters below are intended for internal use only
  is-setup:
    type: boolean
    default: true
  src-repo:
    type: string
    default: https://github.com/esnet/iperf.git
  src-releases-list-url:
    type: string
    default: https://github.com/esnet/iperf/tags
  target-rev:
    type: string
    default: ""
  target-commit-hash:
    type: string
    default: ""
  build-name:
    type: string
    default: ""
  release-on:
    type: string
    default: main

executors:
  ubuntu-docker:
    docker:
      - image: ubuntu:rolling
    resource_class: medium
  archlinux-docker:
    docker:
      - image: archlinux
    resource_class: medium
  ubuntu-machine-aarch64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
  windows:
    machine:
      image: windows-server-2019-vs2019:stable
    shell: powershell.exe
    resource_class: windows.medium
  macos:
    macos:
      xcode: 13.3.0
    resource_class: macos.x86.medium.gen2

jobs:
  setup:
    executor: ubuntu-docker
    parameters:
      continue-config:
        type: string
        default: .circleci/config.yml
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y git jq curl
      - run:
          name: Determine whether we should build the source
          command: |
            if [[ -n "${FORCE_BUILD}" ]]; then
              TARGET_REV="${FORCE_BUILD}"
              echo Forcibly setting TARGET_REV to "${TARGET_REV}"!
            else
              TARGET_REV="$(curl -sSJL "${SRC_RELEASE_LIST_URL}" | grep -o 'releases/tag/[^"]\{1,\}' | head -n 1 | awk -F/ '{ print $NF }')"
              echo Detected the latest release from the origin with revision "${TARGET_REV}".
            fi
            export TARGET_REV

            git clone "${SRC_REPO}" src
            pushd src
            git checkout "${TARGET_REV}"
            TARGET_COMMIT_HASH=$(git rev-parse HEAD)
            export TARGET_COMMIT_HASH
            popd
            echo Corresponding commit hash is "${TARGET_COMMIT_HASH}".
            echo

            if [[ -n "${FORCE_BUILD}" ]] || ! (git tag | grep -P "^${TARGET_REV}-${TARGET_COMMIT_HASH:0:7}-\d+-${CIRCLE_SHA1:0:7}"); then
              echo Calling CircleCI API to build revision "${TARGET_REV}" at "${TARGET_COMMIT_HASH}"...

              curl \
                --fail \
                -X POST \
                -H "Content-Type: application/json" \
                --data-binary "$(
                  jq -n \
                    --arg config "$(cat "${CONTINUE_CONFIG}")" \
                    --arg build_name "${TARGET_REV}-${TARGET_COMMIT_HASH:0:7}-${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}" \
                    '{
                      "continuation-key": $ENV.CIRCLE_CONTINUATION_KEY,
                      "configuration": $config,
                      "parameters": {
                        "is-setup": false,
                        "target-rev": $ENV.TARGET_REV,
                        "target-commit-hash": $ENV.TARGET_COMMIT_HASH,
                        "build-name": $build_name
                      }
                    }'
                )" \
                https://circleci.com/api/v2/pipeline/continue
            else
              echo 'We have already built this target with the tag(s) above. Halting the pipeline.'
              circleci-agent step halt
            fi
          environment:
            FORCE_BUILD: << pipeline.parameters.force-build >>
            SRC_RELEASE_LIST_URL: << pipeline.parameters.src-releases-list-url >>
            SRC_REPO: << pipeline.parameters.src-repo >>
            CONTINUE_CONFIG: << parameters.continue-config >>

  build-linux-amd64:
    executor: ubuntu-docker
    parameters:
      artefact-identifier:
        type: string
        default: iperf3-<< pipeline.parameters.build-name >>-linux-amd64
    environment:
      ARTEFACT_IDENTIFIER: << parameters.artefact-identifier >>
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y git gcc make
      - run:
          name: Clone iperf3
          command: |
            mkdir -p iperf
            cd iperf

            git init
            git remote add origin "${SRC_REPO}"
            git fetch --depth 1 origin "${TARGET_COMMIT_HASH}"
            git checkout "${TARGET_COMMIT_HASH}"
          environment:
            SRC_REPO: << pipeline.parameters.src-repo >>
            TARGET_COMMIT_HASH: << pipeline.parameters.target-commit-hash >>
      - run:
          name: Build iperf3
          working_directory: iperf
          command: |
            IPERF3_MAKE_PREFIX="$(eval echo "${CIRCLE_WORKING_DIRECTORY}")/${ARTEFACT_IDENTIFIER}"
            mkdir -p "${IPERF3_MAKE_PREFIX}"

            ./configure --prefix="${IPERF3_MAKE_PREFIX}" --disable-shared --disable-static --enable-static-bin
            make
            make install

            mkdir -p "${IPERF3_MAKE_PREFIX}/share/doc/iperf3"
            cp LICENSE "${IPERF3_MAKE_PREFIX}/share/doc/iperf3"
      - run:
          name: Create a tarball
          command: tar -czf "${ARTEFACT_IDENTIFIER}.tar.gz" "${ARTEFACT_IDENTIFIER}"
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.artefact-identifier >>.tar.gz
      - store_artifacts:
          path: << parameters.artefact-identifier >>.tar.gz

  build-linux-aarch64:
    executor: ubuntu-machine-aarch64
    parameters:
      artefact-identifier:
        type: string
        default: iperf3-<< pipeline.parameters.build-name >>-linux-aarch64
    environment:
      ARTEFACT_IDENTIFIER: << parameters.artefact-identifier >>
    steps:
      - run:
          name: Run everything inside a latest clean Docker container
          command: |
            docker run --rm -it -e CIRCLE_WORKING_DIRECTORY -e SRC_REPO -e TARGET_COMMIT_HASH -e ARTEFACT_IDENTIFIER -v "$(pwd)":/root -w /root ubuntu:rolling bash -c '''

            set -euo pipefail

            # Install dependencies
            apt update
            apt install -y git gcc make

            # Clone iperf3
            mkdir -p iperf
            pushd iperf

            git init
            git remote add origin "${SRC_REPO}"
            git fetch --depth 1 origin "${TARGET_COMMIT_HASH}"
            git checkout "${TARGET_COMMIT_HASH}"

            # Build iperf3
            IPERF3_MAKE_PREFIX="/root/${ARTEFACT_IDENTIFIER}"
            mkdir -p "${IPERF3_MAKE_PREFIX}"

            ./configure --prefix="${IPERF3_MAKE_PREFIX}" --disable-shared --disable-static --enable-static-bin
            make
            make install

            mkdir -p "${IPERF3_MAKE_PREFIX}/share/doc/iperf3"
            cp LICENSE "${IPERF3_MAKE_PREFIX}/share/doc/iperf3"

            # Create a tarball
            popd
            tar -czf "${ARTEFACT_IDENTIFIER}.tar.gz" "${ARTEFACT_IDENTIFIER}"

            '''
          environment:
            SRC_REPO: << pipeline.parameters.src-repo >>
            TARGET_COMMIT_HASH: << pipeline.parameters.target-commit-hash >>
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.artefact-identifier >>.tar.gz
      - store_artifacts:
          path: << parameters.artefact-identifier >>.tar.gz

  build-windows-amd64:
    executor: windows
    parameters:
      artefact-identifier:
        type: string
        default: iperf3-<< pipeline.parameters.build-name >>-windows-amd64
    environment:
      ARTEFACT_IDENTIFIER: << parameters.artefact-identifier >>
    steps:
      - run:
          name: Download Cygwin installer
          shell: bash.exe -eo pipefail
          command: curl -JOL https://cygwin.com/setup-x86_64.exe
      - run:
          name: Install Cygwin and required packages
          command: .\setup-x86_64.exe -q -s https://mirrors.kernel.org/sourceware/cygwin/ -P libssl-devel,zlib,git,gcc-core,make
      - run:
          name: Clone iperf3 with Cygwin
          shell: C:\\cygwin64\\bin\\bash.exe --login -eo pipefail
          command: |
            eval mkdir -p "${CIRCLE_WORKING_DIRECTORY}"
            eval cd "${CIRCLE_WORKING_DIRECTORY}"

            mkdir -p iperf
            cd iperf

            git init
            git remote add origin "${SRC_REPO}"
            git fetch --depth 1 origin "${TARGET_COMMIT_HASH}"
            git checkout "${TARGET_COMMIT_HASH}"
          environment:
            SRC_REPO: << pipeline.parameters.src-repo >>
            TARGET_COMMIT_HASH: << pipeline.parameters.target-commit-hash >>
      - run:
          name: Build iperf3 with Cygwin
          shell: C:\\cygwin64\\bin\\bash.exe --login -eo pipefail
          command: |
            NATIVE_WORK_DIR="${OLDPWD}"

            IPERF3_MAKE_PREFIX="$(eval echo "${CIRCLE_WORKING_DIRECTORY}")/${ARTEFACT_IDENTIFIER}"
            mkdir -p "${IPERF3_MAKE_PREFIX}"

            eval cd "${CIRCLE_WORKING_DIRECTORY}/iperf"
            ./configure --prefix="${IPERF3_MAKE_PREFIX}" --disable-shared --disable-static
            make
            make install

            # Bundle dependencies
            cp /usr/bin/cygwin1.dll /usr/bin/cygcrypto-1.1.dll /usr/bin/cygz.dll -t "${IPERF3_MAKE_PREFIX}/bin"

            # Copy licence terms
            mkdir -p "${IPERF3_MAKE_PREFIX}/share/doc/iperf3" "${IPERF3_MAKE_PREFIX}/share/doc/Cygwin"
            cp LICENSE -t "${IPERF3_MAKE_PREFIX}/share/doc/iperf3"
            cp /usr/share/doc/Cygwin/CYGWIN_LICENSE /usr/share/doc/Cygwin/COPYING -t "${IPERF3_MAKE_PREFIX}/share/doc/Cygwin"
            cp -r /usr/share/doc/openssl /usr/share/doc/zlib/ -t "${IPERF3_MAKE_PREFIX}/share/doc"

            # Copy the deliverables to the working directory for non-Cygwin environment
            cp -r "$(eval echo "${CIRCLE_WORKING_DIRECTORY}")/." "${NATIVE_WORK_DIR}"
      - run:
          name: Create a Zip file
          command: |
            $ProgressPreference = "SilentlyContinue"
            Compress-Archive ".\\${env:ARTEFACT_IDENTIFIER}" ".\\${env:ARTEFACT_IDENTIFIER}.zip"
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.artefact-identifier >>.zip
      - store_artifacts:
          path: << parameters.artefact-identifier >>.zip

  build-macos-amd64:
    executor: macos
    parameters:
      artefact-identifier:
        type: string
        default: iperf3-<< pipeline.parameters.build-name >>-macos-amd64
    environment:
      ARTEFACT_IDENTIFIER: << parameters.artefact-identifier >>
    steps:
      - run:
          name: Clone iperf3
          command: |
            mkdir -p iperf
            cd iperf

            git init
            git remote add origin "${SRC_REPO}"
            git fetch --depth 1 origin "${TARGET_COMMIT_HASH}"
            git checkout "${TARGET_COMMIT_HASH}"
          environment:
            SRC_REPO: << pipeline.parameters.src-repo >>
            TARGET_COMMIT_HASH: << pipeline.parameters.target-commit-hash >>
      - run:
          name: Build iperf3
          working_directory: iperf
          command: |
            find /usr/local -name libssl.3.dylib -exec rm -f {} \;
            find /usr/local -name libcrypto.3.dylib -exec rm -f {} \;

            IPERF3_MAKE_PREFIX="$(eval echo "${CIRCLE_WORKING_DIRECTORY}")/${ARTEFACT_IDENTIFIER}"
            mkdir -p "${IPERF3_MAKE_PREFIX}"

            ./configure --prefix="${IPERF3_MAKE_PREFIX}" --with-openssl="$(brew --prefix openssl)" --disable-shared --disable-static
            make
            make install

            # Copy licence terms for iperf
            mkdir -p "${IPERF3_MAKE_PREFIX}/share/doc/iperf3"
            cp LICENSE "${IPERF3_MAKE_PREFIX}/share/doc/iperf3"
      - run:
          name: Create a Zip file
          command: zip -r "${ARTEFACT_IDENTIFIER}.zip" "${ARTEFACT_IDENTIFIER}"
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.artefact-identifier >>.zip
      - store_artifacts:
          path: << parameters.artefact-identifier >>.zip

  test-unified:
    parameters:
      executor:
        type: string
      extract-cmd:
        type: string
      artefact-identifier:
        type: string
    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Extracting executable
          command: << parameters.extract-cmd >>
          environment:
            ARTEFACT_IDENTIFIER: << parameters.artefact-identifier >>
      - run:
          name: Test executable
          command: bin/iperf3 -v
          working_directory: << parameters.artefact-identifier >>
      - run:
          name: Run as a server
          command: bin/iperf3 -s
          working_directory: << parameters.artefact-identifier >>
          background: true
      - run:
          name: Pause for a while for the server process to be up and running
          command: exit
      - run:
          name: Run as a client
          command: bin/iperf3 -c localhost -R
          working_directory: << parameters.artefact-identifier >>

  release:
    executor: ubuntu-docker
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y curl git

            tmpPath=$(mktemp)
            curl -sSJL https://api.github.com/repos/cli/cli/releases/latest | grep -o 'https://github.com/cli/cli/releases/download/[^/]\{1,\}/gh_[^/]\{1,\}_linux_amd64.deb' | xargs curl -o $tmpPath -JL
            dpkg -i $tmpPath
      - run:
          name: Create a release
          command: |
            gh release create -R "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" -t "${IPERF3_BUILD_VERSION}" -n "Source: https://github.com/esnet/iperf/tree/${TARGET_COMMIT_HASH}" "${IPERF3_BUILD_VERSION}" ./*
          environment:
            TARGET_COMMIT_HASH: << pipeline.parameters.target-commit-hash >>
            IPERF3_BUILD_VERSION: << pipeline.parameters.build-name >>

workflows:
  setup:
    when: << pipeline.parameters.is-setup >>
    jobs:
      - setup

  build-test-release:
    when:
      not: << pipeline.parameters.is-setup >>
    jobs:
      - build-linux-amd64
      - build-linux-aarch64
      - build-windows-amd64
      - build-macos-amd64

      - test-unified:
          name: test-linux-amd64
          requires:
            - build-linux-amd64
          executor: archlinux-docker
          extract-cmd: tar -xf "${ARTEFACT_IDENTIFIER}.tar.gz"
          artefact-identifier: iperf3-<< pipeline.parameters.build-name >>-linux-amd64
      - test-unified:
          name: test-linux-aarch64
          requires:
            - build-linux-aarch64
          executor: ubuntu-machine-aarch64
          extract-cmd: tar -xf "${ARTEFACT_IDENTIFIER}.tar.gz"
          artefact-identifier: iperf3-<< pipeline.parameters.build-name >>-linux-aarch64
      - test-unified:
          name: test-windows-amd64
          requires:
            - build-windows-amd64
          executor: windows
          extract-cmd: |
            $ProgressPreference = "SilentlyContinue"
            Expand-Archive "${env:ARTEFACT_IDENTIFIER}.zip" .
          artefact-identifier: iperf3-<< pipeline.parameters.build-name >>-windows-amd64
      - test-unified:
          name: test-macos-amd64
          requires:
            - build-macos-amd64
          executor: macos
          extract-cmd: |
            brew uninstall --ignore-dependencies openssl
            unzip "${ARTEFACT_IDENTIFIER}.zip"
          artefact-identifier: iperf3-<< pipeline.parameters.build-name >>-macos-amd64

      - release:
          requires:
            - test-linux-amd64
            - test-windows-amd64
            - test-macos-amd64
          context: github
          filters:
            branches:
              only: << pipeline.parameters.release-on >>
